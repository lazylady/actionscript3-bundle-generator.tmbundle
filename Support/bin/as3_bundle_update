#!/usr/bin/env ruby -wKU

require ENV['TM_SUPPORT_PATH']+'/lib/textmate'
require ENV['TM_BUNDLE_SUPPORT']+'/lib/asdoc_class_parser'
require ENV['TM_BUNDLE_SUPPORT']+'/lib/asdoc_framework_parser'
require ENV['TM_BUNDLE_SUPPORT']+'/lib/list_to_regexp'

# ==========================
# = Environmental Settings =
# ==========================

BUNDLE_PATH = '/Users/simon/Library/Application Support/TextMate/Bundles/ActionScript 3.tmbundle'
GRAMMAR_PATH = BUNDLE_PATH + '/Syntaxes/ActionScript 3.tmLanguage'

FLASH_PATH = '/Library/Application Support/Adobe/Help/en_US/AS3LCR/Flash_10.0/all-classes.html'
FLEX_PATH = '/Developer/SDKs/flex_sdk_4.0.0/asdoc-output/all-classes.html' 

unless File.exist?(FLASH_PATH) and File.exist?(FLEX_PATH) and File.exist?(BUNDLE_PATH)
    TextMate.exit_show_tool_tip "Failed to find required files."
end

# =================================
# = Loading and Parsing of Asdocs =
# =================================

@log = true;

def create_cp(id,filter,path)
  
  fp = AsdocFrameworkParser.new
  fp.logging_enabled = @log
  fp.package_filter = filter
  fp.load_framework path

  cp = AsdocClassParser.new
  cp.id = id
  cp.logging_enabled = @log
  cp.framework = fp.framework_name
  cp.load_classes fp.class_path_list
  
  cp 
end

t  = create_cp('top-level', /^\.\//,FLASH_PATH)
f  = create_cp('flash', /^flash/, FLASH_PATH)
fl = create_cp('fl', /^fl\//, FLASH_PATH)
fx = create_cp('flashx', /^flashx\//, FLEX_PATH)
mx = create_cp('mx', /^mx\//, FLEX_PATH)
sp = create_cp('spark', /^spark\//, FLEX_PATH)
os = create_cp('osmf', /^org\/osmf/, FLEX_PATH)

libs = [t,f,fl,fx,mx,sp,os]

# collect docs info from flex docs.
dp = AsdocFrameworkParser.new
dp.logging_enabled = @log
dp.load_framework FLEX_PATH

# ===========
# = Logging =
# ===========

def to_file(path, content)
	if content		
		File.open(path, File::WRONLY|File::TRUNC|File::CREAT) do |file|
			file << content
		end
	end
end

if @log

  path = '/Users/simon/Desktop/as3_bundle_temp'
 
  unless File.exists?(path) 
  	Dir.mkdir(path)
  end

  to_file( path+"/constant_names.txt", f.constant_names.join("\n"))
  to_file( path+"/method_names.txt",   f.method_names.join("\n") )
  to_file( path+"/property_names.txt", f.property_names.join("\n"))

  to_file( path+"/constant_names_comp.txt", ListToRegexp.process_list(f.constant_names))
  to_file( path+"/method_names_comp.txt",   ListToRegexp.process_list(f.method_names) )
  to_file( path+"/property_names_comp.txt", ListToRegexp.process_list(f.property_names))

end

exit

# =========================
# = Grammar Load and Save =
# =========================
 
def pattern_for(name, list)
  return unless list = ListToRegexp.process_list(list)
  {
    'name'  => name,
    'match' => "\\b#{ list }\\b"
  }
end

@grammar = OSX::PropertyList.load(File.read(GRAMMAR_PATH))

def add_framework(parser)

	patterns = []	

	patterns << pattern_for( "support.constant.#{parser.id}.actionscript.3", parser.constant_names )
	patterns << pattern_for( "support.function.#{parser.id}.actionscript.3", parser.method_names )
	patterns << pattern_for( "support.property.#{parser.id}.actionscript.3", parser.property_names )

	@grammar['repository']['framework-'+parser.id] = { 'patterns' => patterns }
	
end

def add_support_classes(parser)
  patterns = []
  patterns << pattern_for( "support.class.#{parser.id}.actionscript.3", parser.class_names )
  @grammar['repository']['support-classes-'+parser.id] = { 'patterns' => patterns }
end

libs.each { |lib|
  add_support_classes(lib)
  add_framework(lib)
}

File.open(GRAMMAR_PATH, "w") do |file|
  file << @grammar.to_plist
end

# =========================
# = AutoCompletion Outupt =
# =========================

all_completions = []
libs.each { |lib| all_completions + lib.method_completions  }
all_completions = all_completions.uniq.sort

method_completions = File.open( BUNDLE_PATH+"/Support/data/completions.txt", 
                                File::WRONLY|File::TRUNC|File::CREAT )
method_completions.puts all_completions

# ===================================
# = Documentation Dictionary Output =
# ===================================

doc_extras = IO.readlines( ENV['TM_BUNDLE_SUPPORT']+"/data/templates/additional_help.txt" )
doc_dictionary = File.new( BUNDLE_PATH+"/Support/data/doc_dictionary.xml",
                           File::WRONLY|File::TRUNC|File::CREAT )

doc_dictionary.puts '<?xml version="1.0" encoding="UTF-8"?>'
doc_dictionary.puts "<dict>"
doc_dictionary.puts dp.doc_path_list.sort
doc_dictionary.print doc_extras
doc_dictionary.puts "</dict>"

# `osascript -e 'tell app "TextMate" to reload bundles'`

print "Complete."
